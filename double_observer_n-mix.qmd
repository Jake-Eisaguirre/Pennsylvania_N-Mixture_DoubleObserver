---
title: "Double Observer N-Mix"
format: html
editor: source
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, lubridate, tidyr)

```

## Connect to `survey_data` schema in `ribbitr` database
```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")



```

## Query 2022 N-Mix Penn data
```{r}

# Data
nmix_q <- "select r.region, s.site, s.area_sqr_m, v.date, v.survey_time, s2.duration_minutes, 
          v2.species_ves, v2.count, v2.observer, s2.air_temp_c, s2.water_temp_c, s2.wind, s2.sky, s2.relative_humidity_percent
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join ves v2 on s2.survey_id = v2.survey_id
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01';"

nmix_raw_data <- dbGetQuery(connection, nmix_q) %>% 
  select(!c(region, survey_time)) %>% 
  arrange(date) %>% 
  mutate(species_ves = str_remove_all(species_ves, "\\."),
         species_ves = if_else(species_ves == "desmog_spp", "desmongnathus_sp", species_ves))


# find all visits
visit_nmix_q <- "select r.region, s.site, v.date, v.survey_time, s2.detection_type, s2.observer
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                join survey s2 on v.visit_id = s2.visit_id
                where r.region = 'pennsylvania'
                and v.date > '2023-01-01'
                and s2.detection_type = 'visual';"


nmix_raw_visits_q <-dbGetQuery(connection, visit_nmix_q) 


```

## Visualize all VES 
```{r}

viz <- nmix_raw_visits %>% 
  group_by(site) %>% 
  summarise(n = n())

ggplot(data = viz) +
  geom_col(aes(x=site, y = n)) +
  ggtitle("Raw Visits")

viz <- nmix_raw_data %>% 
  group_by(site, date, species_ves) %>% 
  summarise(n = n())

ggplot(data = viz) +
  geom_col(aes(x=site, y = n, fill = species_ves)) +
  ggtitle("Raw Visits")

```


## Sum across date, site, species, and observer. Then populate zeroes for dates visisted with no encounters and count number of observers per visit
```{r}

# prep raw visit table for number of visits and number of observers
ndays <- 3
nmix_raw_visits <- nmix_raw_visits_q %>% 
  arrange(date) %>% 
  select(site, date, observer) %>% 
  mutate(near = (lag(date, default = first(date)) + ndays < date) |> cumsum(), .by = site) %>%  
  mutate(n_visit = rep(list(1,2,3), length.out = n()), .by = c(site, near)) %>% 
  mutate(visit_group = cumsum(n_visit == 1), .by = site,
         n_visit = paste("visit_", n_visit, sep=""),
         observer = if_else(observer == "", "Myah Madril, Rachel Verdi", observer)) %>% 
  arrange(site) %>% 
  select(!c(near)) %>% 
  mutate(observer = strsplit(as.character(observer), ",")) %>%
  unnest(observer) %>% 
  group_by(site, date) %>% 
  mutate(obs_n = match(observer, unique(observer)),
         obs_n = paste0("obs_", obs_n, sep = "")) %>% 
  ungroup() %>% 
  select(!c(observer))

# sum counts across observers and count number of obs
n_mix_mid_clean_up <- nmix_raw_data %>% 
  group_by(date, site, observer, species_ves) %>% 
  reframe(n = sum(count)) %>% 
  group_by(site, date) %>% 
  mutate(obs_n = match(observer, unique(observer)),
         obs_n = paste0("obs_", obs_n, sep = "")) %>% 
  ungroup() %>% 
  select(!c(observer))

# pull out visits
visits <- nmix_raw_visits %>% 
  select(site, date, obs_n, n_visit)

#join counts on raw_visits and populate zeroes per date, site, obs_n
nmix_clean <- nmix_raw_visits %>% 
  left_join(n_mix_mid_clean_up, by = c("date", "site", "obs_n")) %>% 
  complete(nesting(date, site, obs_n, visit_group), 
           species_ves = unique(n_mix_mid_clean_up$species_ves), 
           fill = list(n = 0)) %>% 
  select(!c(n_visit)) %>% 
  left_join(visits, by = c("site", "date", "obs_n")) %>% 
  drop_na(species_ves) %>% 
  mutate(season = if_else(date < "2023-06-21", "spring", "summer")) 

# %>% 
#   unite(month_day, c("month", "day"), sep ="-") %>% 
#   unite(site, c("site", "month_day"), sep = "_")

# %>% 
#   unite(site, c("site", "obs_n"), sep = "_") %>% 
#   group_by(.) %>% 
#   filter(all(c("visit_1", ...) %in% n_visit))
```

## Now loop through each species and pivot 
```{r}

nmix_table <- nmix_clean %>% 
  filter(species_ves == "rana_catesbeiana") %>%
  select(!c(species_ves, season)) %>% 
  pivot_wider(id_cols = c("site", "obs_n", "visit_group"), names_from = n_visit, values_from = n) %>% 
  drop_na(visit_1) %>% 
  drop_na(visit_2) %>% 
  select(!c(site, obs_n, visit_group))

umf <- unmarkedFramePCount(y = nmix_table)

fm1 <- pcount(~1 ~1, 
              data = umf,
              engine = "R",
               control=list(trace=T, REPORT=5))

backTransform(fm1, "state")
backTransform(fm1, "det")

```



---
title: "Double Observer N-Mix"
format: html
editor: source
---

## Load Packages

```{r}
#| output: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

librarian::shelf(tidyverse, RPostgres, DBI, unmarked, here, lubridate, tidyr)

```

## Connect to `survey_data` schema in `ribbitr` database
```{r}
#| output: false
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

#search path
dbExecute(connection, "set search_path to survey_data")



```

## Query 2022 N-Mix Penn data
```{r}

# Data
nmix_q <- "select r.region, s.site, s.area_sqr_m, v.date, v.survey_time, s2.duration_minutes, 
          v2.species_ves, v2.count, v2.observer
          from region r
          join site s on r.region_id = s.region_id 
          full join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id 
          join ves v2 on s2.survey_id = v2.survey_id
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01';"

nmix_raw_data <- dbGetQuery(connection, nmix_q) %>% 
  select(!c(region, survey_time)) %>% 
  arrange(date) %>% 
  mutate(species_ves = str_remove_all(species_ves, "\\."),
         species_ves = if_else(species_ves == "desmog_spp", "desmongnathus_sp", species_ves)) %>% 
  filter(!species_ves == "unknown")


# find all visits
visit_nmix_q <- "select r.region, s.site, v.date, v.survey_time, s2.detection_type, s2.observer
                from region r
                join site s on r.region_id = s.region_id 
                join visit v on s.site_id = v.site_id 
                join survey s2 on v.visit_id = s2.visit_id
                where r.region = 'pennsylvania'
                and v.date > '2023-01-01'
                and s2.detection_type = 'visual';"


nmix_raw_visits_q <-dbGetQuery(connection, visit_nmix_q) %>% 
  mutate(observer = if_else(site == "rv_pond" & date == "2023-06-05",
                            "Jae,Rachel Verdi", observer),
         observer = if_else(site == "rv_pond" & date == "2023-06-06",
                            "Jae,Rachel Verdi,Luci Anaya", observer),
         observer = if_else(site == "tuttle_pond" & date == "2023-05-30",
                            "Abby Trauffer,Brandon Hoenig", observer))

# co-variates
cov_q <- "select r.region, s.site, s.area_sqr_m, v.date, v.survey_time, s2.air_temp_c, s2.water_temp_c, s2.wind, 
          s2.sky, s2.relative_humidity_percent
          from region r
          join site s on r.region_id = s.region_id 
          join visit v on s.site_id = v.site_id 
          join survey s2 on v.visit_id = s2.visit_id
          where r.region = 'pennsylvania'
          and v.date > '2023-01-01'
          and s2.detection_type = 'visual';"

covs <- dbGetQuery(connection, cov_q) %>% 
  mutate(area_sqr_m = if_else(site == "tryon_weber", 100, area_sqr_m))


```


# Stack Observers into one row

## Sum across date, site, species, and observer. Then populate zeroes for dates visisted with no encounters and count number of observers per visit
```{r}

# prep raw visit table for number of visits and number of observers
ndays <- 2
nmix_raw_visits <- nmix_raw_visits_q %>% 
  arrange(date) %>% 
  select(site, date, observer) %>% 
  mutate(near = (lag(date, default = first(date)) + ndays < date) |> cumsum(), .by = site) %>%  
  mutate(n_visit = rep(list(1,2,3), length.out = n()), .by = c(site, near)) %>% 
  mutate(visit_group = cumsum(n_visit == 1), .by = site,
         n_visit = paste("visit_", n_visit, sep=""),
         observer = if_else(observer == "", "Myah Madril, Rachel Verdi", observer)) %>% 
  arrange(site) %>% 
  select(!c(near)) %>% 
  mutate(observer = strsplit(as.character(observer), ",")) %>%
  unnest(observer) %>% 
  group_by(site, date) %>% 
  mutate(obs_n = match(observer, unique(observer)),
         obs_n = paste0("obs_", obs_n, sep = "")) %>% 
  ungroup() %>% 
  select(!c(observer))

# sum counts across observers and count number of obs
n_mix_mid_clean_up <- nmix_raw_data %>% 
  group_by(date, site, observer, species_ves) %>% 
  reframe(n = sum(count)) %>% 
  group_by(site, date) %>% 
  mutate(obs_n = match(observer, unique(observer)),
         obs_n = paste0("obs_", obs_n, sep = "")) %>% 
  ungroup() %>% 
  select(!c(observer))

# pull out visits
visits <- nmix_raw_visits %>% 
  select(site, date, obs_n, n_visit)

# covariates
covariates <- covs %>% 
  select(site, date, area_sqr_m, water_temp_c, air_temp_c)


 # area
area_cov <- covariates %>% 
  select(site, area_sqr_m) %>% 
  unique()

#air temp
air_temp <- covariates %>% 
  select(site, date, air_temp_c)

#Julian date
j_date <- covariates %>% 
  select(site, date) %>% 
  mutate(j_date = yday(date))

#join counts on raw_visits and populate zeroes per date, site, obs_n
nmix_clean <-  nmix_raw_visits %>% 
  left_join(n_mix_mid_clean_up, by = c("date", "site", "obs_n")) %>% 
  complete(nesting(date, site, obs_n, visit_group), 
           species_ves = unique(n_mix_mid_clean_up$species_ves), 
           fill = list(n = 0)) %>% 
  select(!c(n_visit)) %>% 
  left_join(visits, by = c("site", "date", "obs_n")) %>% 
  drop_na(species_ves) %>% 
  mutate(season = if_else(date < "2023-06-21", "spring", "summer"),
         n_visit = as.numeric(str_remove(n_visit, "visit_")),
         n_visit = case_when(obs_n == "obs_2" ~ n_visit + 3,
                             obs_n == "obs_3" ~ n_visit + 6,
                             obs_n == "obs_4" ~ n_visit + 9,
                             obs_n == "obs_5" ~ n_visit + 12,
                             obs_n == "obs_6" ~ n_visit + 15,
                             obs_n == "obs_1" ~ n_visit)) %>% 
  arrange(n_visit) %>% 
  mutate(n_visit = paste("visit_", n_visit, sep = "")) %>% 
  left_join(area_cov, by = c("site")) %>% 
  left_join(air_temp, by = c("site", "date")) %>% 
  left_join(j_date, by = c("site", "date"))

#write_csv(nmix_clean, here("nmix_clean.csv"))

```

## Now loop through each species and pivot 
```{r}
#| warning: false

spec_list <- unique(nmix_clean$species_ves)

lambda_results <- vector('list', length(spec_list))
detection_results <- vector('list', length(spec_list))

for (i in 1:length(spec_list)) {
  
  # Pivot table and filter species    
  nmix_table <- nmix_clean %>% 
        filter(species_ves == spec_list[i]) %>%
        select(!c(species_ves)) %>% 
        pivot_wider(id_cols = c("site", "visit_group", "area_sqr_m", "season"), names_from = n_visit, values_from = n) %>% 
        drop_na(visit_2) %>% 
        select(!c(visit_group))
      
      
  umf <- unmarkedFramePCount(y = nmix_table[4:12],
                             siteCovs = nmix_table[1:3])
      # -1 + 
  fm1 <- pcount(~ 1 ~ -1+site, 
                data = umf,
                K = 150)
      
      
  lam <- plogis(coef(fm1, type = "state"))
  lambda_results[[i]] <- lam
  
  det <- backTransform(fm1, "det")
  detection_results[[i]] <- det
  
  
  # Error checking during loop
  print(paste("done with", spec_list[i]))
      
}

detection_results <- setNames(detection_results, c(spec_list))

lambda_results <- setNames(lambda_results, c(spec_list))


```

## View Model Results
```{r}
# Transformed Abundance
lambda_results[10]

# Detection
detection_results[10]

```

# Observers as Seperate rows

## Wrangle above data correctly
```{r}

nmix_clean_sep <-  nmix_raw_visits %>% 
  left_join(n_mix_mid_clean_up, by = c("date", "site", "obs_n")) %>% 
  complete(nesting(date, site, obs_n, visit_group), 
           species_ves = unique(n_mix_mid_clean_up$species_ves), 
           fill = list(n = 0)) %>% 
  select(!c(n_visit)) %>% 
  left_join(visits, by = c("site", "date", "obs_n")) %>% 
  drop_na(species_ves) %>% 
  mutate(season = if_else(date < "2023-06-21", "spring", "summer")) %>% 
  arrange(n_visit) %>% 
  #mutate(n_visit = paste("visit_", n_visit, sep = "")) %>% 
  left_join(area_cov, by = c("site")) %>% 
  left_join(air_temp, by = c("site", "date")) %>% 
  left_join(j_date, by = c("site", "date"))

#write_csv(nmix_clean_sep, here("nmix_clean_sep.csv"))
```

## Model
```{r}
#| warning: false

spec_list <- unique(nmix_clean_sep$species_ves)

lambda_results_sep <- vector('list', length(spec_list))
detection_results_sep <- vector('list', length(spec_list))

for (i in 1:length(spec_list)){
  
  nmix_table <- nmix_clean_sep %>% 
    filter(species_ves == spec_list[i]) %>%
    select(!c(species_ves)) %>% 
    pivot_wider(id_cols = c("site", "visit_group", "obs_n", "area_sqr_m", "season"), names_from = n_visit, values_from = n) %>% 
    drop_na(visit_2) %>% 
    #drop_na(visit_1) %>%  # What to do about observer who was only there for the second repeat day but not 1st or 2nd?
    select(!c(obs_n, visit_group, area_sqr_m))
  
  obsCovs_sep <- nmix_clean_sep %>% 
    select(site, visit_group, obs_n, n_visit, season, air_temp_c, j_date, species_ves) %>% 
    filter(species_ves == spec_list[i]) %>%
    select(!c(species_ves)) %>% 
    pivot_wider(id_cols = c("site", "visit_group", "obs_n", "season"), names_from = n_visit, 
                values_from = c(air_temp_c, j_date)) %>% 
    drop_na(j_date_visit_2) %>% 
    #drop_na(visit_1) %>%  # What to do about observer who was only there for the second repeat day but not 1st or 2nd?
    select(!c(obs_n, visit_group)) %>% 
    mutate(site_visit_1 = site,
           site_visit_2 = site,
           site_visit_3 = site,
           season_visit_1 = season,
           season_visit_2 = season,
           seas_visit_3 = season) %>% 
    select(!c(site, season))
  
  
  
  umf <- unmarkedFramePCount(y = nmix_table[3:5],
                            siteCovs = nmix_table[1:3],
                            obsCovs = list(air_temp = obsCovs_sep[1:3],
                                           date = obsCovs_sep[4:6],
                                           site = obsCovs_sep[7:9],
                                           season = obsCovs_sep[10:12]))
  
  
  
  fm1 <- pcount(~1 ~ -1+site, 
                data = umf,
                K = 150)
  
  lam <- plogis(coef(fm1, type = "state"))
  lambda_results_sep[[i]] <- lam
  
  det <- backTransform(fm1, "det")
  detection_results_sep[[i]] <- det
  
  
  # Error checking during loop
  print(paste("done with", spec_list[i]))

}

detection_results_sep <- setNames(detection_results_sep, c(spec_list))

lambda_results_sep <- setNames(lambda_results_sep, c(spec_list))

                                                                                                                       
```
## View Model Results
```{r}
# Transformed Abundance
lambda_results_sep[10]

# Detection
detection_results_sep[10]

```

